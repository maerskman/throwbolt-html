var joke = "Why couldn't the shoes go out and play?
They were all /*"tied*/" up!";
console.log(joke);


Why couldn't the shoes go out and play?
They were all "tied" up!




var joke = Why couldn't the shoes go out and play?;
console.log("They were all tied up!");




console.log("Why couldn't the shoes go out and play?");


var haiku = "Blowing from the west" + \t "Fallen leaves gather" + \t"In the east.";
console.log(haiku);


var haiku = "\"Blowing from the west \" + "Fallen leaves gather \" + \"In the east."\";
console.log(haiku);


var haiku = Blowing from the west\n Fallen leaves gather\n In the east.;
console.log(haiku);


--------------------
https://rootinweb.blogspot.com/2017/06/udacity-intro-to-js-data-types-and.html
----------------------

-----------------------
http://www.codermania.com/javascript/lesson/1k/string-operators
-----------------------


+++++++++++++++++++++++++
right answer:

var haiku = "Blowing from the west\n" + "Fallen leaves gather\n" +"In the east.";
console.log(haiku);

++++++++++++++++++++++++=


var signedIn;
console.log(signedIn);

-----

var signedIn;
console.log(signedIn);

undefined

undefined


var signedIn=1;
console.log(signedIn);





-----------------------------------------------------------





Equality
Equality
So far, you’ve seen how you can use == and != to compare numbers and strings for equality. However, if you use == and != in situations where the data you’re comparing is mixed, it can lead to some interesting results. For example,

"1" == 1
Returns: true
and

0 == false
Returns: true
both evaluate to true. Why is that?

Implicit type coercion
JavaScript is known as a loosely typed language.

Basically, this means that when you’re writing JavaScript code, you do not need to specify data types. Instead, when your code is interpreted by the JavaScript engine it will automatically be converted into the "appropriate" data type. This is called implicit type coercion and you’ve already seen examples like this before when you tried to concatenate strings with numbers.

"julia" + 1
Returns: "julia1"
In this example, JavaScript takes the string "julia" and adds the number 1 to it resulting in the string "julia1". In other programming languages, this code probably would have returned an error, but in JavaScript the number 1 is converted into the string "1" and then is concatenated to the string "julia".

It’s behavior like this which makes JavaScript unique from other programming languages, but it can lead to some quirky behavior when doing operations and comparisons on mixed data types.
QUESTION 1 OF 2

What value do you think the result of "Hello" % 10 will be?




--------------


DEFINITION: A strongly typed language is a programming language that is more likely to generate errors if data does not closely match an expected type. Because JavaScript is loosely typed, you don’t need to specify data types; however, this can lead to errors that are hard to diagnose due to implicit type coercion.
Example of strongly typed programming language code

int count = 1;
string name = "Julia";
double num = 1.2932;
float price = 2.99;
Equivalent code in JavaScript

// equivalent code in JavaScript
var count = 1; 
var name = "Julia";
var num = 1.2932;
var price = 2.99;
In the example below, JavaScript takes the string "1", converts it to true, and compares it to the boolean true.

"1" == true
Returns: true
When you use the == or != operators, JavaScript first converts each value to the same type (if they’re not already the same type); this is why it's called "type coercion"! This is often not the behavior you want, and it’s actually considered bad practice to use the == and != operators when comparing values for equality.

Strict equality
Instead, in JavaScript it’s better to use strict equality to see if numbers, strings, or booleans, etc. are identical in type and value without doing the type conversion first. To perform a strict comparison, simply add an additional equals sign = to the end of the == and != operators.

"1" === 1
Returns: false
This returns false because the string "1" is not the same type and value as the number 1.

0 === false
Returns: false
This returns false because the number 0 is not the same type and value as the boolean false.
QUESTION 2 OF 2

Check the the expressions that evaluate to true.


s


var 1 = "purple";
var 2 = "penis";
console.log = "1" + "2";

var thingOne = "purple";
var thingTwo = "penis";
console.log = "thingOne " + "thingTwo";



var one = "red";
var two ="blue";               <-------  Works
console.log( one + " " + two);





var thingOne = "red";
var thingTwo ="blue";            <----------  works
console.log( thingOne + " " + thingTwo);


var "1" = "red";
var "2" ="blue";
console.log( "1 + " " + 2");

red blue


var one = "red";
var two ="blue";         <--------------worked
console.log( one + " " + two);


var fullname = "curtj";
console.log = "fullname";


var fullname = "curtj";
console.log = ("fullname");
---------------------------

var fullname = "curtj";
console.log = (fullname);

--------------------------

var bill = 10.25 + 3.99+ 7.15;
var tip = (bill * 15%);


var bill = "10.25+3.99+7.15";
var tip = bill*15%;
console.log = (tip);


console.log = (10.25+3.99+7.15);

--------------------------------------------------



var bill = 10.25 + 3.99 + 7.15;
var tip = bill * 0.15;
var total = bill + tip;
console.log(total);

var bill = 10.25 + 3.99 + 7.15;
var tip = bill * 0.15;
var total = bill + tip;
console.log(total);
---------------------------------------------------


A re-introduction to JavaScript (JS tutorial)

https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript


http://www.ecma-international.org/  <----- Technology standards consortium


https://nodejs.org/en/


----------------------------------------------------


JavaScript Function Syntax
A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().

Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).

The parentheses may include parameter names separated by commas:
(parameter1, parameter2, ...)

The code to be executed, by the function, is placed inside curly brackets: {}

function name(parameter1, parameter2, parameter3) {
    code to be executed
}
Function parameters are the names listed in the function definition.

Function arguments are the real values received by the function when it is invoked.

Inside the function, the arguments (the parameters) behave as local variables.


https://www.hackreactor.com/prep-programs


--------------------------------------------------------



var bill = 10.25 + 3.99 + 7.15;
var tip = bill * 0.15;
var total = bill + tip;
console.log(total);


-------------------------------------------------------

Mad Libs

Mad Libs is a word game where players have fun substituting words for blanks in a story. For this exercise, use the adjective variables below to fill in the blanks and complete the following message.

"The Intro to JavaScript course is __________. James and Julia are so __________. I cannot wait to work through the rest of this __________ content!"
var adjective1 = "amazing";
var adjective2 = "fun";
var adjective3 = "entertaining";
Assign the resulting string to a variable called madLib.


-------------------------------------------------------


var adjective1 = "amazing";
var adjective2 = "fun";
var adjective3 = "entertaining";
var madlibs = "adjective1" + "adjecive2" + "adjective3";
console.log = (madlibs);



var madlib;

var adjective1 = "amazing";
var adjective2 = "fun";
var adjective3 = "entertaining";
var madlibs = "adjective1" + "adjective2" + "adjective3";
------------------------------
------------------------------
var madLib;
madLib = "The Intro to JavaScript course is " + adjective1 + "." "James and Julia are so " + adjective2 + "." "I cannot wait to work through the rest of this" + objective3 + "content!"
console.log(madLib);

var madLib = 'The Intro to JavaScript course is ' + adjective1 + '. '+'James and Julia are so ' + adjective2 + '. '+ 'I cannot wait to work through the rest of this ' + adjective3 + ' content!';
console.log(madLib);

-----------------------------------
----------------------------------
var madLib;
madLib = 'The Intro to JavaScript course is ' + adjective1 + '. '+'James and Julia are so ' + adjective2 + '. '+ 'I cannot wait to work through the rest of this ' + adjective3 + ' content!';
console.log(madLib);


var adjective1 = 'amazing';
var adjective2 = 'fun';
var adjective3 = 'entertaining';

var madLib = 'The Intro to JavaScript course is ' + adjective1 + '. '+'James and Julia are so ' + adjective2 + '. '+ 'I cannot wait to work through the rest of this ' + adjective3 + ' content!';
console.log(madLib);

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------


Directions:
Here are two awesome messages:

"Hi, my name is Julia. I love cats. In my spare time, I like to play video games."
"Hi, my name is James. I love baseball. In my spare time, I like to read."
Declare and assign values to three variables for each part of the sentence that changes (firstName, interest, and hobby).

Use your variables and string concatenation to create your own awesome message and store it in an awesomeMessage variable. Finally, print your awesome message to the JavaScript console.



var awesomeMessage;
var firstname = 'julia';
var interest = 'cats';
var hobby = 'video games';

var awesomeMessage = 'Hi my name is ' + firstname + '.' + 'I love ' + interest + '.' + 'In my spare time, I like to play ' + hobby + '.';
console.log(awesomeMessage);

------
VM746:7 Hi my name is julia.I love cats.In my spare time, I like to play video games.
------


var awesomeMessage;
var firstName = 'Julia';
var interest = 'cats';
var hobby = 'video games';

var awesomeMessage = 'Hi, my name is ' + firstName + '. ' + 'I love ' + interest + '. ' + 'In my spare time, I like to play ' + hobby + '.';
console.log(awesomeMessage);

------------------>
Hi, my name is Julia. I love cats. In my spare time, I like to play video games.   <-----
